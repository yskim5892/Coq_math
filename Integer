Require Import NatProps.
Inductive Z : Type :=
  | z ( n m : nat).

Axiom z_eq : forall (n1 n2 m1 m2 : nat),
n1 + m2 = n2 + m1 -> z n1 n2 = z m1 m2.

Definition z_plus (z1 : Z)(z2 : Z) : Z :=
  match z1 with 
  | z a b => match z2 with
    | z c d => z (a+c) (b+d)
    end
  end.

Definition z_neg (z1 : Z) : Z :=
  match z1 with
  | z a b => z b a
  end.

Definition z_minus (z1 : Z)(z2 : Z) :=
  z_plus z1 (z_neg z2).

Definition z_mul (z1 : Z)(z2 : Z) :=
  match z1 with
  | z a b => match z2 with
    | z c d => z (a*c + b*d) (a*d + b*c)
    end
  end.

Theorem z_plus_comm :forall (z1 z2 : Z),
  z_plus z1 z2 = z_plus z2 z1.
Proof.
destruct z1, z2. simpl.
 
Qed.